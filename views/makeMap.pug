doctype HTML
head
	title Above the Horizon
	link(rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" integrity="sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z" crossorigin="anonymous")
	link(rel="stylesheet" href="css/main.css")
	script(src="js/stuquery.min.js" type="text/javascript")
	script(src="https://code.jquery.com/jquery-1.12.4.min.js")
	script(src="js/virtualsky.min.js" type="text/javascript")
	script.
		S(document).ready(function() {
			let lat, long;
			let searchParams = new URLSearchParams(window.location.search)

			var months = {
				'Jan' : '01',
				'Feb' : '02',
				'Mar' : '03',
				'Apr' : '04',
				'May' : '05',
				'Jun' : '06',
				'Jul' : '07',
				'Aug' : '08',
				'Sep' : '09',
				'Oct' : '10',
				'Nov' : '11',
				'Dec' : '12'
			}

			var planetarium = S.virtualsky({
				id: 'starmap',
				projection: 'stereo',
				showdate: false,
				showposition: false,
				gridlines_az: true
			});

			function positionErrorHandler(err) {
				if (err.code == 1) {
					alert("Error: Access is denied!");
				} else if (err.code == 2) {
					alert("Error: Position is unavailable!");
				}
			}

			function getLocation() {
				if (navigator.geolocation) {
					var options = {timeout: 60000};
					navigator.geolocation.getCurrentPosition(showPosition, positionErrorHandler, options);
				} else {
					console.log("Geolocation not supported");
				}
			}
			
			function showPosition(position) {
				if (position.latitude === undefined || position.longitude === undefined) {
					generateURL(43.6532, 79.3832)
				} else {
					generateURL(position.latitude, position.longitude)
				}
			}

			function generateURL(latitude, longitude) {
				var url = window.location.href.split('?')[0] + "?lat=" +  latitude + "&long=" + longitude;
				window.location = url;
			}

			let updateTime = document.getElementById("updateTime");
			let updateTimeValue = document.getElementById("updateTimeValue");

			let updateDate = document.getElementById("updateDate");
			let updateDateValue = document.getElementById("updateDateValue");

			let updateLatitude = document.getElementById("updateLatitude");
			let updateLongitude = document.getElementById("updateLongitude");
			let updateLocation = document.getElementById("updateLocation");

			updateTime.addEventListener("click", funcUpdateTime, false);
			updateDate.addEventListener("click", funcUpdateDate, false);
			updateLocation.addEventListener("click", funcUpdateLocation, false);

			function funcUpdateTime() {
				let time = updateTimeValue.value;
				let dateVars = planetarium.clock.toString().split(" ");
				let dateStr = `${dateVars[3]}-${months[dateVars[1]]}-${dateVars[2]}T${time}.000`;
				let date = new Date(dateStr);
				planetarium.updateClock(date);
			}

			function funcUpdateDate() {
				let dateValue = updateDateValue.value;
				let dateVars = planetarium.clock.toString().split(" ");
				let dateStr = `${dateValue}T${dateVars[4]}.000`;
				let date = new Date(dateStr);
				planetarium.updateClock(date);
			}

			function funcUpdateLocation() {
				let latitude = updateLatitude.value;
				let longitude = updateLongitude.value;
				generateURL(latitude, longitude);
			}
			
			if (document.location.search.length) {
				lat = searchParams.get('lat');
				long = searchParams.get('long');
				planetarium.setLatitude(lat);
				planetarium.setLongitude(long);
				planetarium.moveIt();
			} else {
				getLocation();
			}

			function initializeSideNav() {
				let dateVars = planetarium.clock.toString().split(" ");
				updateTimeValue.value = dateVars[4];
				updateDateValue.value = `${dateVars[3]}-${months[dateVars[1]]}-${dateVars[2]}`;
				updateLatitude.value = planetarium.latitude.deg;
				updateLongitude.value = planetarium.longitude.deg;
			}

			initializeSideNav();

			var json = !{JSON.stringify(jsonList)};

			for(let i =0; i <  6; i++){
				let ra = json[i]['\"RA (J2000']['0)\"'];
				let dec = json[i]['\"Dec'][' (J2000']['0)\"'];
				let name =  json[i]['\"Target Name\"']
				planetarium.addPointer({
					'ra':ra,
					'dec':dec,
					'label': name,
					'colour':'rgb(255,220,220)',
					'url': 'worldWind.html?pos=' + ra + ',' + dec + ',10000000&loc=' + lat + ',' + long
				})
			}

			planetarium.addPointer({
				'ra':83.8220792,
				'dec':-5.3911111,
				'label':'Orion Nebula',
				'img':'http://server7.sky-map.org/imgcut?survey=DSS2&w=128&h=128&ra=5.58813861333333&de=-5.3911111&angle=1.25&output=PNG',
				'url':'worldWind.html?pos=35,139,10000000&loc=' + lat + ',' + long,
				'colour':'rgb(255,220,220)'
			})
			
		});


body
	nav(class="navbar navbar-expand-md navbar-dark bg-dark fixed-top")
		a(class="navbar-brand" href="#") ORBITAL VIEW


	div(class="main-container")
		div(id="sidebar-wrapper" class="bg-light border-right")
			div(class="list-group list-group-flush")
				span(class="list-group-item list-group-item-action bg-light") Time
					br
					br
					input(type="time" class="sidenavInput" id="updateTimeValue" name="updateTimeValue")
					br
					br
					button(id="updateTime" class="btn my-2 my-sm-0 btn-outline-dark" type="button") Update Time
				span(class="list-group-item list-group-item-action bg-light") Date
					br
					br
					input(type="date" class="sidenavInput" id="updateDateValue" name="updateDateValue")
					br
					br
					button(id="updateDate" class="btn my-2 my-sm-0 btn-outline-dark" type="button") Update Date
				span(class="list-group-item list-group-item-action bg-light") Latitude
					br
					br
					input(type="text" class="sidenavInput" id="updateLatitude" name="updateLatitude")
					br
					br
					p Longitude
					input(type="text" class="sidenavInput" id="updateLongitude" name="updateLongitude")
					br
					br
					button(id="updateLocation" class="btn my-2 my-sm-0 btn-outline-dark" type="button") Update Location
				span(class="creators")
					p Space Apps 2020: Orbital View Challenge
					hr
					p Solution Developed By:
					p Mason Cooper, Shayne Taylor, Joshua Smith
		div(id="starmap")